import time
import cv2
import mediapipe as mp
import numpy as np
import random
mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose


def calculate_angle(a, b, c):
    a = np.array(a)  # First
    b = np.array(b)  # Mid
    c = np.array(c)  # End

    radians = np.arctan2(c[1] - b[1], c[0] - b[0]) - np.arctan2(
        a[1] - b[1], a[0] - b[0]
    )
    angle = np.abs(radians * 180.0 / np.pi)

    if angle > 180.0:
        angle = 360 - angle

    angle = round(angle, 2)
    return angle


shoulder_state = None
elbow_state = None
hand_state = None
counter = 0
temp_state = []
a = 0
bad_counter = []
state = None

def counter_logic(
    shoulder_angle1, shoulder_angle2, hand_state, counter, shoulder_state, temp_state, a
):
    # Shoulder logic
    if (
        shoulder_angle1 > 90
        and shoulder_angle1 < 180
        and shoulder_angle2 > 90
        and shoulder_angle2 < 180
    ):
        shoulder_state = "up"

    elif shoulder_angle1 < 20 and shoulder_angle2 < 20:
        shoulder_state = "down"
    elif (
        shoulder_angle1 > 50
        and shoulder_angle1 < 90
        and shoulder_angle2 > 50
        and shoulder_angle2 < 90
    ):
        shoulder_state = "middle"

    

    # Counter logic
    if shoulder_state == "down":  # and elbow_state == "straight":
        hand_state = "down"
        temp_state.append("down")
        a = 1

    elif (
        shoulder_state == "up" and hand_state == "middle"
    ):  # elbow_state == "straight" and
        # counter += 1
        hand_state = "up"
        temp_state.append("up")
        a = 2

    elif shoulder_state == "middle" and hand_state == "down":
        counter += 1
        hand_state = "middle"
        temp_state.append("middle")
        a = 3
    print(a)

    return hand_state, counter, shoulder_state, temp_state, a


def check(temp_state, counter, a, bad_counter, state):
    if counter != 0 and a == 1:
        if "up" in temp_state:
            state = "dung"

        else:
            state = "sai"
            if counter not in bad_counter:
                bad_counter.append(counter)
                print("sai")
            if counter in bad_counter:
                pass

    if a == 3 and counter != 0:
        temp_state.clear()
    return bad_counter, state


vid_path = "test.mp4"
cap = cv2.VideoCapture(0)
# Curl counter variables
counter = 0
stage = None

## Setup mediapipe instance
with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:
    while cap.isOpened():
        ret, frame = cap.read()

        # Recolor image to RGB
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False

        # Make detection
        results = pose.process(image)

        # Recolor back to BGR
        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

        # Extract landmarks
        try:
            landmarks = results.pose_landmarks.landmark

            # Get coordinates1

            shoulder_left = [
                landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x,
                landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y,
            ]
            elbow_left = [
                landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].x,
                landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].y,
            ]
            wrist_left = [
                landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].x,
                landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].y,
            ]

            shoulder_right = [
                landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].x,
                landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].y,
            ]
            elbow_right = [
                landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value].x,
                landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value].y,
            ]
            wrist_right = [
                landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value].x,
                landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value].y,
            ]

            hip_left = [
                landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].x,
                landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].y,
            ]
            hip_right = [
                landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value].x,
                landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value].y,
            ]

            # calculate angle join

            leftshoulder_angle = calculate_angle(hip_left, shoulder_left, elbow_left)
            rightshoulder_angle = calculate_angle(
                hip_right, shoulder_right, elbow_right
            )
            leftelbow_angle = calculate_angle(shoulder_left, elbow_left, wrist_left)
            rightelbow_angle = calculate_angle(shoulder_right, elbow_right, wrist_right)

            # Visualize angle
            cv2.putText(
                image,
                str(leftshoulder_angle),
                tuple(np.multiply(shoulder_left, [640, 480]).astype(int)),
                cv2.FONT_HERSHEY_SIMPLEX,
                0.5,
                (255, 255, 255),
                2,
                cv2.LINE_AA,
            )

            cv2.putText(
                image,
                str(rightshoulder_angle),
                tuple(np.multiply(shoulder_right, [640, 480]).astype(int)),
                cv2.FONT_HERSHEY_SIMPLEX,
                0.5,
                (255, 255, 255),
                2,
                cv2.LINE_AA,
            )
            cv2.putText(
                image,
                str(leftelbow_angle),
                tuple(np.multiply(elbow_left, [640, 480]).astype(int)),
                cv2.FONT_HERSHEY_SIMPLEX,
                0.5,
                (255, 255, 255),
                2,
                cv2.LINE_AA,
            )
            cv2.putText(
                image,
                str(rightelbow_angle),
                tuple(np.multiply(elbow_right, [640, 480]).astype(int)),
                cv2.FONT_HERSHEY_SIMPLEX,
                0.5,
                (255, 255, 255),
                2,
                cv2.LINE_AA,
            )

        except:
            pass

        hand_state, counter, shoulder_state, temp_state, a = counter_logic(
            leftshoulder_angle,
            rightshoulder_angle,
            hand_state,
            counter,
            shoulder_state,
            temp_state,
            a,
        )
        badct, st = check(temp_state, counter, a, bad_counter, state)
        # print(temp_state)
        print(badct)
        print(counter)
        # Render curl counter
        # Setup status box
        cv2.rectangle(image, (0, 0), (225, 73), (245, 117, 16), -1)

        cv2.rectangle(image, (640, 0), (500, 73), (245, 117, 16), -1)

        cv2.putText(
            image,
            "REP STATUS",
            (520, 12),
            cv2.FONT_HERSHEY_SIMPLEX,
            0.5,
            (0, 0, 0),
            1,
            cv2.LINE_AA,
        )
        cv2.putText(
            image,
            str(st),
            (520, 60),
            cv2.FONT_HERSHEY_SIMPLEX,
            1.5,
            (255, 255, 0),
            2,
            cv2.LINE_AA,
        )
        # Rep data
        cv2.putText(
            image,
            "REPS",
            (15, 12),
            cv2.FONT_HERSHEY_SIMPLEX,
            0.5,
            (0, 0, 0),
            1,
            cv2.LINE_AA,
        )
        cv2.putText(
            image,
            str(counter),
            (10, 60),
            cv2.FONT_HERSHEY_SIMPLEX,
            2,
            (255, 255, 255),
            2,
            cv2.LINE_AA,
        )

        # Stage data
        cv2.putText(
            image,
            "STAGE",
            (70, 12),
            cv2.FONT_HERSHEY_SIMPLEX,
            0.5,
            (0, 0, 0),
            1,
            cv2.LINE_AA,
        )
        cv2.putText(
            image,
            hand_state,
            (60, 60),
            cv2.FONT_HERSHEY_SIMPLEX,
            2,
            (255, 255, 255),
            2,
            cv2.LINE_AA,
        )

        connections = mp_pose.POSE_CONNECTIONS
        connection_colors = [(116, 232, 218), (254, 53, 84), (32, 63, 149), (82, 34, 148), (52, 211, 128), (65, 54, 33), (136, 231, 55), (56, 101, 214), (66, 2, 26), (34, 246, 32), (217, 5, 183), (60, 120, 113), (70, 129, 157), (208, 156, 254), (143, 240, 99), (213, 176, 165), (202, 110, 27), (28, 239, 107), (89, 86, 175), (234, 54, 151), (37, 20, 105), (127, 117, 5), (23, 193, 7), (209, 231, 234), (177, 129, 172), (199, 145, 240), (211, 159, 77), (215, 90, 114), (244, 235, 138), (106, 18, 234), (208, 191, 106), (185, 225, 51), (44, 33, 243), (105, 60, 252), (194, 115, 127), (225, 252, 68), (10, 88, 14), (181, 25, 116), (237, 133, 254), (16, 80, 18), (154, 235, 116), (49, 36, 157), (163, 73, 156), (20, 44, 156), (227, 77, 140), (159, 82, 193), (251, 241, 136), (198, 78, 168), (49, 125, 141), (30, 33, 48), (211, 246, 172), (99, 192, 252), (140, 59, 140), (37, 243, 82), (237, 191, 250), (229, 16, 44), (86, 49, 142), (251, 212, 216), (130, 249, 215), (25, 138, 106), (27, 134, 215), (248, 172, 223), (55, 44, 68), (237, 238, 155), (132, 222, 126), (110, 122, 86), (125, 250, 89), (149, 138, 58), (136, 239, 95), (186, 127, 124), (38, 213, 12), (68, 250, 233), (158, 9, 85), (161, 84, 143), (234, 119, 231), (40, 151, 150), (191, 58, 6), (55, 31, 189), (171, 171, 171), (243, 4, 49), (114, 86, 138), (195, 93, 91), (133, 53, 157), (198, 92, 97), (199, 209, 192), (46, 23, 138), (52, 12, 245), (155, 47, 143), (107, 81, 186), (242, 35, 56), (203, 254, 146), (221, 195, 184), (211, 102, 73), (215, 144, 25), (200, 120, 188), (178, 74, 183), (237, 252, 230), (213, 111, 121), (169, 228, 180), (6, 174, 10), (185, 95, 58), (47, 61, 105), (182, 80, 230), (97, 95, 207), (214, 161, 2), (90, 218, 201), (108, 230, 245), (251, 175, 53), (94, 188, 103), (196, 117, 95), (181, 223, 138), (230, 120, 112), (222, 147, 196), (163, 72, 157), (54, 216, 52), (152, 227, 231), (129, 87, 207), (131, 186, 186), (73, 198, 214), (184, 113, 205), (175, 211, 24), (166, 104, 230), (198, 244, 158), (198, 226, 70), (61, 1, 87), (48, 23, 5), (131, 79, 212), (222, 48, 30), (66, 166, 99), (206, 181, 162), (3, 136, 129), (60, 155, 106), (19, 172, 17), (168, 33, 8), (169, 225, 244), (106, 161, 77), (40, 232, 1), (122, 202, 54), (144, 90, 241), (100, 83, 236), (208, 11, 193), (151, 109, 232), (118, 112, 100), (3, 108, 95), (41, 157, 210), (123, 232, 235), (82, 102, 157), (30, 160, 77), (38, 216, 254), (235, 25, 120), (155, 219, 106), (143, 168, 88), (135, 105, 24), (229, 32, 20), (164, 205, 233), (184, 61, 50), (45, 240, 68), (42, 163, 39), (214, 36, 13), (182, 245, 218), (12, 170, 198), (106, 32, 88), (16, 60, 102), (62, 77, 23), (18, 82, 112), (67, 106, 203), (138, 177, 235), (19, 42, 220), (155, 130, 204), (89, 213, 156), (18, 234, 136), (53, 70, 247), (249, 77, 14), (168, 192, 173), (30, 186, 188), (44, 0, 129), (177, 235, 82), (216, 178, 90), (82, 7, 138), (16, 209, 248), (64, 209, 112), (156, 122, 94), (250, 88, 154), (219, 149, 36), (11, 85, 54), (143, 38, 14), (61, 144, 243), (255, 101, 129), (19, 175, 233), (223, 189, 228), (42, 255, 106), (202, 126, 26), (232, 237, 189), (94, 214, 96), (88, 45, 63), (251, 67, 8), (210, 82, 165), (111, 131, 117), (227, 181, 124), (52, 145, 61), (38, 94, 81), (213, 243, 227), (158, 248, 97), (163, 185, 206), (51, 0, 6), (201, 184, 193), (178, 7, 14), (180, 179, 60), (216, 137, 198), (23, 225, 165), (207, 212, 171), (78, 53, 40), (120, 164, 246), (5, 244, 166), (242, 98, 18), (108, 195, 183), (232, 211, 66), (24, 186, 57), (25, 197, 118), (21, 240, 36), (90, 6, 44), (53, 60, 240), (247, 112, 173), (11, 179, 74), (239, 66, 42), (202, 139, 155), (41, 162, 38), (174, 107, 74), (64, 245, 202), (87, 150, 72), (190, 101, 17), (219, 158, 60), (157, 202, 249), (209, 189, 6), (181, 69, 187), (131, 60, 85), (45, 74, 105), (91, 254, 151), (115, 103, 111), (239, 41, 146), (122, 235, 164), (123, 106, 41), (158, 91, 71), (8, 145, 174), (88, 227, 37), (131, 176, 117), (72, 153, 110), (2, 12, 153), (22, 33, 176), (109, 229, 91), (141, 152, 19), (98, 32, 66), (234, 126, 78), (220, 79, 28), (55, 203, 151), (237, 165, 75), (85, 80, 44), (247, 248, 87), (52, 11, 241), (153, 226, 111), (197, 188, 86), (223, 90, 18), (81, 195, 225), (6, 101, 34), (71, 85, 86), (109, 183, 244), (74, 71, 231), (237, 80, 19), (45, 67, 180), (176, 19, 225), (144, 217, 227), (56, 204, 95), (213, 171, 111), (42, 92, 232), (105, 125, 139), (100, 33, 235), (150, 36, 84), (74, 44, 100), (77, 221, 227), (212, 243, 94), (182, 187, 245), (24, 186, 81), (89, 78, 130), (90, 183, 120), (235, 230, 118), (180, 86, 235), (156, 134, 6), (84, 140, 65), (25, 174, 224), (41, 85, 91), (24, 62, 166), (121, 9, 227), (39, 160, 18), (160, 5, 211), (27, 49, 202), (79, 53, 184), (110, 54, 190), (152, 197, 130), (2, 87, 158), (73, 14, 79), (55, 149, 230), (15, 174, 30), (3, 250, 222), (182, 248, 114), (244, 45, 153), (162, 211, 198), (61, 32, 167), (255, 195, 120), (186, 99, 181), (232, 54, 77), (50, 181, 93), (204, 250, 199), (130, 174, 231), (127, 210, 47), (235, 187, 155), (184, 65, 48), (164, 73, 188), (213, 27, 79), (31, 160, 169), (5, 155, 216), (52, 193, 225), (143, 179, 172), (85, 13, 130), (17, 216, 18), (54, 162, 50), (170, 38, 7), (136, 169, 22), (38, 167, 139), (202, 234, 136), (117, 140, 51), (189, 156, 96), (215, 192, 98), (154, 104, 66), (44, 171, 74), (74, 55, 45), (252, 142, 41), (110, 222, 198), (41, 94, 31), (56, 4, 176), (189, 174, 210), (187, 226, 38), (251, 186, 189), (14, 244, 254), (187, 14, 196), (15, 99, 217), (178, 56, 95), (91, 156, 149), (61, 87, 115), (242, 210, 135), (163, 104, 95), (154, 156, 36), (246, 5, 8), (177, 121, 0), (33, 57, 165), (247, 237, 231), (11, 36, 88), (17, 161, 7), (116, 170, 1), (44, 94, 210), (19, 207, 222), (229, 147, 128), (195, 215, 193), (93, 204, 153), (131, 145, 16), (51, 245, 112), (122, 58, 62), (106, 59, 209), (173, 146, 68), (244, 155, 19), (165, 102, 203), (38, 0, 76), (181, 145, 218), (86, 235, 243), (110, 233, 86), (2, 164, 91), (248, 63, 240), (45, 227, 115), (175, 25, 25), (107, 9, 4), (219, 120, 90), (87, 114, 178), (63, 211, 244), (229, 192, 51), (251, 26, 30), (8, 196, 250), (189, 152, 188), (147, 55, 24), (125, 160, 111), (170, 47, 158), (132, 34, 33), (232, 47, 113), (125, 29, 232), (24, 120, 200), (50, 123, 167), (3, 209, 26), (68, 69, 187), (76, 1, 203), (139, 44, 158), (96, 252, 119), (15, 90, 176), (249, 59, 245), (79, 43, 55), (178, 13, 135), (5, 244, 44), (98, 66, 146), (152, 110, 115), (31, 215, 81), (83, 179, 118), (89, 186, 14), (24, 46, 234), (143, 214, 39), (35, 64, 68), (57, 107, 165), (31, 74, 163), (231, 194, 5), (154, 179, 125), (112, 52, 83), (165, 195, 59), (136, 249, 6), (182, 163, 172), (146, 178, 146), (219, 227, 227), (15, 169, 218), (185, 147, 236), (238, 213, 128), (63, 135, 119), (132, 94, 214), (126, 78, 242), (141, 15, 21), (243, 34, 151), (162, 190, 169), (46, 22, 70), (181, 43, 0), (29, 59, 98), (220, 149, 165), (148, 104, 111), (209, 236, 198), (139, 192, 203), (32, 230, 208), (31, 42, 220), (171, 72, 105), (71, 148, 112), (50, 252, 112), (188, 220, 205), (47, 255, 99), (92, 81, 229), (82, 151, 165), (153, 65, 63), (35, 86, 201), (9, 112, 176), (149, 22, 51), (200, 207, 88), (171, 166, 226), (57, 14, 67), (74, 255, 171), (22, 112, 160), (127, 26, 21), (12, 142, 250), (24, 90, 241), (175, 48, 94), (186, 190, 201), (218, 165, 45), (237, 77, 209), (96, 152, 215), (123, 63, 41), (103, 23, 97), (65, 236, 215), (110, 14, 23), (11, 201, 242), (50, 172, 243), (73, 85, 46), (98, 239, 191), (21, 49, 61), (155, 224, 132), (65, 2, 137), (15, 47, 82), (142, 66, 176), (105, 84, 185), (99, 64, 160), (241, 254, 85), (59, 68, 160), (3, 25, 59), (180, 87, 2), (9, 100, 106), (92, 35, 200), (77, 151, 51), (59, 103, 112), (229, 210, 165), (76, 250, 65), (169, 210, 8), (251, 151, 130), (207, 91, 200), (17, 68, 105), (217, 88, 222), (43, 52, 74), (170, 50, 144), (184, 160, 255), (128, 103, 128), (169, 230, 183), (180, 21, 226), (188, 0, 58), (120, 162, 138), (206, 17, 83), (253, 124, 147), (119, 100, 122), (214, 95, 163), (228, 168, 145), (166, 236, 65), (156, 107, 55), (2, 52, 9), (145, 53, 222), (124, 101, 38), (119, 56, 9), (222, 41, 144), (140, 66, 180), (95, 223, 214), (180, 24, 93), (48, 162, 5), (248, 30, 134), (80, 108, 56), (129, 74, 89), (216, 102, 110), (69, 132, 145), (29, 250, 247), (204, 233, 86), (80, 48, 174), (165, 252, 106), (225, 14, 145), (20, 246, 223), (105, 95, 25), (138, 160, 128), (195, 231, 130), (169, 201, 20), (6, 98, 35), (47, 249, 230), (72, 64, 28), (221, 59, 18), (129, 198, 49), (204, 45, 48), (40, 63, 165), (255, 67, 175), (46, 34, 132), (166, 215, 138), (134, 222, 140), (108, 228, 38), (225, 47, 201), (39, 67, 187), (251, 124, 10), (6, 63, 107), (12, 116, 239), (201, 168, 209), (164, 163, 239), (174, 136, 151), (3, 25, 251), (8, 165, 214), (170, 19, 24), (194, 65, 157), (46, 45, 88), (197, 130, 213), (13, 127, 171), (108, 34, 119), (103, 54, 129), (108, 185, 140), (80, 64, 142), (152, 237, 32), (15, 112, 119), (14, 55, 234), (228, 31, 215), (19, 42, 213), (205, 158, 174), (238, 90, 230), (122, 206, 123), (233, 96, 228), (243, 214, 176), (35, 145, 219), (91, 68, 117), (191, 98, 133), (162, 234, 111), (207, 79, 208), (169, 94, 233), (246, 168, 14), (28, 98, 48), (66, 239, 157), (144, 15, 203), (46, 170, 162), (231, 90, 233), (20, 144, 170), (177, 249, 146), (186, 9, 168), (186, 202, 117), (33, 142, 98), (9, 218, 102), (33, 244, 42), (1, 124, 136), (93, 194, 222), (212, 146, 146), (96, 14, 3), (182, 245, 19), (233, 209, 228), (121, 245, 109), (217, 114, 240), (186, 143, 132), (248, 18, 192), (9, 107, 2), (113, 232, 171), (146, 234, 238), (116, 54, 5), (252, 227, 11), (124, 147, 52), (111, 141, 175), (113, 123, 209), (119, 34, 65), (0, 171, 186), (120, 130, 241), (41, 157, 185), (24, 23, 50), (137, 18, 20), (211, 136, 131), (41, 13, 185), (100, 76, 87), (37, 111, 220), (22, 221, 182), (253, 29, 252), (177, 238, 88), (203, 135, 57), (125, 55, 79), (27, 87, 201), (65, 221, 170), (197, 10, 63), (137, 174, 241), (73, 228, 202), (8, 234, 233), (250, 96, 3), (23, 106, 138), (113, 205, 115), (48, 168, 24), (6, 84, 56), (44, 146, 196), (69, 182, 206), (28, 163, 43), (48, 233, 153), (32, 140, 126), (164, 97, 160), (244, 60, 153), (251, 215, 116), (151, 203, 31), (59, 178, 3), (28, 147, 42), (246, 195, 255), (2, 113, 70), (24, 2, 26), (61, 160, 141), (135, 181, 56), (179, 242, 131), (154, 220, 37), (36, 158, 189), (74, 64, 126), (42, 78, 244), (133, 247, 109), (29, 131, 205), (195, 192, 140), (130, 164, 239), (70, 199, 25), (43, 173, 225), (83, 76, 187), (239, 138, 1), (56, 27, 74), (104, 189, 16), (47, 182, 43), (83, 35, 71), (192, 131, 54), (19, 182, 121), (28, 42, 69), (155, 74, 102), (105, 22, 211), (194, 29, 49), (136, 173, 134), (129, 189, 64), (41, 105, 99), (221, 73, 167), (39, 28, 26), (222, 149, 171), (26, 5, 202), (99, 89, 170), (49, 187, 237), (70, 252, 31), (153, 5, 90), (197, 47, 234), (115, 134, 179), (164, 207, 176), (254, 0, 172), (79, 35, 103), (4, 43, 142), (207, 34, 4), (143, 24, 248), (113, 146, 50), (0, 131, 66), (29, 28, 230), (153, 240, 153), (151, 222, 247), (121, 89, 20), (95, 85, 230), (62, 116, 184), (199, 95, 190), (231, 120, 135), (173, 223, 220), (1, 34, 202), (228, 37, 97), (188, 59, 91), (56, 232, 161), (13, 142, 62), (243, 31, 61), (131, 28, 29), (144, 29, 171), (213, 182, 152), (123, 93, 129), (153, 154, 80), (97, 226, 6), (169, 255, 187), (206, 165, 130), (204, 50, 139), (60, 63, 172), (59, 124, 139), (42, 248, 129), (1, 156, 7), (223, 234, 250), (180, 212, 254), (91, 172, 110), (66, 245, 185), (204, 182, 157), (214, 223, 25), (133, 117, 83), (219, 187, 105), (197, 150, 137), (73, 134, 235), (224, 81, 135), (3, 184, 249), (78, 63, 152), (119, 41, 155), (93, 94, 123), (116, 194, 253), (195, 19, 50), (87, 55, 104), (151, 49, 153), (101, 146, 160), (205, 251, 211), (117, 84, 29), (146, 106, 243), (74, 236, 89), (215, 196, 176), (99, 61, 215), (73, 42, 190), (214, 249, 179), (226, 109, 237), (153, 42, 181), (155, 159, 8), (134, 246, 148), (121, 178, 166), (164, 34, 3), (215, 202, 68), (128, 146, 51), (150, 110, 9), (160, 17, 72), (8, 225, 94), (41, 147, 172), (119, 2, 15), (215, 233, 13), (220, 181, 17), (206, 79, 71), (162, 42, 33), (30, 188, 154), (229, 58, 123), (1, 179, 219), (144, 4, 247), (220, 31, 40), (97, 141, 199), (24, 49, 46), (156, 87, 62), (168, 0, 193), (233, 240, 238), (177, 197, 167), (123, 153, 66), (86, 22, 7), (201, 239, 19), (241, 224, 10), (206, 38, 50), (94, 166, 156), (133, 180, 162), (25, 50, 110), (226, 203, 240), (66, 228, 82), (142, 80, 67), (102, 182, 159), (76, 17, 223), (246, 216, 145), (70, 159, 40), (107, 215, 172), (12, 183, 159), (140, 141, 222), (108, 182, 73), (91, 209, 79), (77, 239, 59), (13, 122, 36), (104, 195, 55), (120, 29, 208), (39, 150, 60), (167, 176, 3), (79, 165, 141), (132, 239, 206), (139, 205, 99), (195, 163, 183), (110, 175, 137), (247, 37, 111), (15, 97, 44), (61, 166, 56), (106, 76, 156), (147, 55, 222), (246, 94, 201), (179, 164, 175), (151, 54, 28), (123, 153, 189), (42, 42, 203), (206, 141, 133), (97, 71, 26), (130, 68, 2), (187, 83, 246), (253, 31, 100), (166, 7, 9), (76, 255, 14), (152, 234, 91), (214, 162, 127), (42, 198, 110), (145, 249, 128), (75, 166, 81), (104, 84, 23), (73, 116, 65), (58, 195, 131), (173, 94, 106), (156, 102, 53), (43, 234, 56), (190, 107, 109), (13, 39, 81), (76, 125, 188), (237, 24, 76), (178, 135, 57), (128, 247, 53), (26, 133, 7), (174, 37, 218), (122, 203, 185), (134, 112, 48), (38, 215, 8), (69, 231, 130), (24, 200, 143), (221, 248, 13), (194, 18, 226), (76, 158, 189), (7, 28, 78), (6, 37, 204), (35, 120, 247), (19, 172, 224), (151, 71, 217), (80, 148, 114), (81, 51, 200), (242, 36, 172), (4, 41, 103), (226, 42, 81), (154, 76, 206), (130, 249, 134), (255, 201, 142), (124, 153, 58), (157, 34, 251), (10, 73, 24), (134, 118, 195), (49, 48, 52), (179, 226, 106), (0, 12, 83), (134, 233, 80), (22, 111, 196), (29, 253, 251), (83, 183, 30), (110, 81, 77), (222, 221, 31), (2, 35, 195), (211, 153, 192), (47, 181, 9), (203, 145, 47), (157, 163, 71), (252, 143, 223), (103, 237, 168), (224, 108, 10), (141, 115, 5), (23, 98, 38), (161, 105, 188), (63, 169, 87), (226, 0, 105), (226, 37, 137), (123, 199, 57), (179, 103, 15), (241, 148, 47), (244, 148, 130), (0, 150, 227), (156, 175, 144), (84, 162, 102), (102, 62, 135), (229, 197, 90), (77, 140, 250), (143, 6, 194), (84, 27, 128), (92, 224, 224), (125, 185, 1), (171, 198, 214), (249, 200, 28), (181, 73, 219), (31, 87, 22), (235, 34, 57), (5, 55, 59), (69, 66, 222), (241, 141, 245), (9, 74, 186), (68, 221, 167), (82, 247, 129), (163, 12, 181), (227, 89, 91), (150, 67, 140), (104, 239, 253), (102, 168, 1), (39, 114, 32), (23, 16, 118), (88, 11, 125), (177, 109, 68), (173, 128, 88), (212, 49, 143), (10, 112, 148), (174, 207, 211), (54, 85, 57), (20, 6, 26), (185, 0, 100), (193, 208, 67), (244, 27, 75), (88, 59, 161), (175, 179, 61), (222, 52, 63), (77, 96, 164), (196, 100, 49), (99, 37, 191), (151, 58, 85), (169, 83, 43), (40, 5, 125), (194, 24, 131), (7, 161, 14), (242, 184, 56), (204, 36, 96), (14, 114, 228), (76, 45, 195), (31, 218, 6), (66, 196, 148), (92, 226, 189), (21, 230, 180), (183, 148, 167), (222, 153, 121), (77, 98, 225), (6, 222, 104), (199, 130, 40), (217, 252, 161), (76, 223, 239), (73, 151, 176), (71, 205, 29), (48, 187, 11), (163, 223, 233), (174, 153, 134), (27, 75, 236), (180, 19, 160), (203, 118, 106), (185, 22, 3), (198, 225, 198), (185, 103, 100), (115, 156, 46), (76, 101, 138), (197, 232, 72), (95, 7, 10), (31, 186, 38), (174, 90, 146), (210, 120, 165), (187, 131, 182), (165, 249, 59), (116, 196, 205), (133, 85, 143), (126, 84, 51), (98, 85, 133), (207, 172, 221), (7, 242, 56), (208, 60, 162), (194, 237, 242), (120, 248, 78), (216, 91, 1), (162, 124, 188), (249, 207, 143), (45, 195, 26), (253, 62, 222), (3, 43, 27)]

        
        for idx, connection in enumerate(connections):
            start_idx, end_idx = connection
            start_landmark = results.pose_landmarks.landmark[start_idx]
            end_landmark = results.pose_landmarks.landmark[end_idx]
            random.shuffle(connection_colors)

            # Use different color for each connection
            color = connection_colors[idx % len(connection_colors)]

            # Draw each connection individually
            cv2.line(
                image,
                (
                    int(start_landmark.x * image.shape[1]),
                    int(start_landmark.y * image.shape[0]),
                ),
                (
                    int(end_landmark.x * image.shape[1]),
                    int(end_landmark.y * image.shape[0]),
                ),
                color,
                2,
            )

        cv2.imshow("Mediapipe Feed", image)

        if cv2.waitKey(10) & 0xFF == ord("q"):
            break

    cap.release()
    cv2.destroyAllWindows()
